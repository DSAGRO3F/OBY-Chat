"""
Module de surveillance des fichiers pour l'indexation automatique.

Ce module utilise Watchdog pour observer les r√©pertoires contenant des documents √† indexer
(docx, donn√©es web, versions de plans). Lorsqu‚Äôun changement est d√©tect√©, le pipeline
d‚Äôindexation complet est automatiquement relanc√© pour mettre √† jour les bases vectorielles.

Fonctions :
- start_scheduler : D√©marre la surveillance continue via Watchdog.

Classes :
- IndexingEventHandler : Handler personnalis√© d√©clenchant l‚Äôindexation √† chaque √©v√©nement.
"""



from watchdog.observers import Observer
from watchdog.events import FileSystemEventHandler
import threading
import schedule
import time
from datetime import datetime
import os
from src.func.run_full_indexing_pipeline import run_full_indexing_pipeline
from config.config import INPUT_DOCX, WEB_SITES_HEALTH_DOC_BASE, WEB_SITES_MODULE_PATH

# R√©pertoires √† surveiller
WATCHED_DIRECTORIES = [
    INPUT_DOCX,
    WEB_SITES_HEALTH_DOC_BASE
]


class IndexingEventHandler(FileSystemEventHandler):
    """
    Handler personnalis√© d√©clenchant l‚Äôindexation lors de changements dans les fichiers.

    Cette classe h√©rite de FileSystemEventHandler et surcharge la m√©thode on_any_event
    pour appeler `run_full_indexing_pipeline()` d√®s qu‚Äôun fichier est ajout√©, modifi√©
    ou supprim√© dans l‚Äôun des r√©pertoires surveill√©s.
    """

    def on_any_event(self, event):
        if event.is_directory:
            return
        print(f"\nüìÇ Changement d√©tect√© : {event.src_path} ({event.event_type})")
        print(f"[{datetime.now().strftime('%Y-%m-%d %H:%M:%S')}] üîÑ Lancement de l‚Äôindexation suite √† un changement...\n")
        run_full_indexing_pipeline()



def start_scheduler():
    """
    D√©marre la surveillance des fichiers via Watchdog.

    Si les bases ChromaDB n‚Äôexistent pas ou sont vides, lance une indexation initiale.
    Ensuite, observe les r√©pertoires d√©finis et relance automatiquement l‚Äôindexation
    si un fichier est ajout√©, modifi√© ou supprim√©.

    Cette fonction est appel√©e au d√©marrage de l‚Äôapplication dans un thread d√©di√©.
    """

    from config.config import CHROMA_GLOBAL_DIR

    # √âtape 1 : V√©rifier si une indexation initiale est n√©cessaire
    if not os.path.exists(CHROMA_GLOBAL_DIR) or not os.listdir(CHROMA_GLOBAL_DIR):
        print(f"\nüöÄ Initialisation des bases ChromaDB (premier d√©marrage)...")
        run_full_indexing_pipeline()
    else:
        print(f"\nüìö Base ChromaDB d√©j√† existante. Surveillance uniquement.")

    # √âtape 2 : Activer la surveillance des fichiers
    print("üëÅÔ∏è D√©marrage de la surveillance des fichiers (Watchdog)...")
    event_handler = IndexingEventHandler()
    observer = Observer()

    for directory in WATCHED_DIRECTORIES:
        observer.schedule(event_handler, path=directory, recursive=True)
        print(f"üìÅ Surveillance activ√©e sur : {directory}")

    observer.start()

    try:
        while True:
            time.sleep(1)
    except KeyboardInterrupt:
        observer.stop()
    observer.join()




