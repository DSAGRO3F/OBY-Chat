"""
Module de conversion de fiches documentaires DOCX en fichiers JSON exploitables.

Ce module permet d‚Äôextraire le contenu textuel structur√© de fichiers Word (.docx)
pr√©sents dans un r√©pertoire donn√©, et de les convertir en dictionnaires JSON.
Ces JSON sont ensuite utilis√©s dans l‚Äôapplication OBY-IA pour l‚Äôindexation
et la recherche s√©mantique de recommandations.

Fonctionnalit√©s :
- Lecture et traitement de fichiers `.docx`.
- Nettoyage et normalisation du contenu.
- Export en fichiers `.json` avec le m√™me nom de base.
"""


import os
import re
import json
from datetime import datetime
from pathlib import Path
# INPUT_DOCX directory des fichiers docx √† traiter, JSON_HEALTH_DOC_BASE directory de sortie des fichiers apr√®s traitement.
from config.config import INPUT_DOCX, JSON_HEALTH_DOC_BASE
from typing import Union
from docx import Document


def convert_fiches_docx_to_json(input_dir: str) -> list[dict]:
    """
    Convertit toutes les fiches DOCX d‚Äôun r√©pertoire en dictionnaires JSON.

    Parcourt les fichiers `.docx` du dossier sp√©cifi√©, extrait leur contenu
    sous forme de paragraphes structur√©s, puis les formate en paires
    (titre, contenu) dans une liste de dictionnaires.

    Args:
        input_dir (str) : Chemin vers le r√©pertoire contenant les fichiers DOCX.

    Returns:
        List[Dict[str, str]] : Liste de dictionnaires contenant les textes extraits
        de chaque fiche, pr√™ts √† √™tre sauvegard√©s ou index√©s.
    """

    docx_path = Path(input_dir)
    if docx_path.is_dir():  # garde-fou
        print("‚ùå Dossier re√ßu, fichier .docx attendu:", docx_path)
        return []

    print(f"‚úÖ Lecture du fichier : {docx_path}")
    if not docx_path.exists():
        print(f"‚ùå Fichier introuvable : {docx_path}")
        return []

    try:
        doc = Document(str(docx_path))
    except Exception as e:
        print(f"‚ùå Erreur d'ouverture du fichier {docx_path} : {type(e).__name__} - {e}")
        return []

    full_text = "\n".join([para.text.strip() for para in doc.paragraphs if para.text.strip()])

    fiche_pattern = r"(Fiche(?:\s+(?:Recommandation|arbre\s+d√©cisionnel))?\s+0*\d{1,3})"
    split_points = [m.start() for m in re.finditer(fiche_pattern, full_text, flags=re.IGNORECASE)]
    split_points.append(len(full_text))

    fiches = []
    for i in range(len(split_points) - 1):
        bloc = full_text[split_points[i]:split_points[i + 1]].strip()

        match_id = re.match(r"Fiche(?:\s+(?:Recommandation|arbre\s+d√©cisionnel))?\s+0*(\d{1,3})", bloc, re.IGNORECASE)
        fiche_id = match_id.group(1).zfill(3) if match_id else f"{i:03d}"

        titre_match = re.search(r"Fiche(?:\s+(?:Recommandation|arbre\s+d√©cisionnel))?\s+0*\d{1,3}\s*[-:]?\s*(.+)", bloc, re.IGNORECASE)
        titre = titre_match.group(1).strip() if titre_match else f"Fiche {fiche_id}"

        print(f"‚úÖ Fiche d√©tect√©e : ID={fiche_id} | Titre={titre}")

        fiche = {
            "fiche_id": fiche_id,
            "titre": titre,
            "type_document": "recommendation_structured",
            "source_doc": docx_path.name,
            "date_indexation": datetime.today().strftime("%Y-%m-%d"),
            "texte_complet": bloc
        }
        fiches.append(fiche)

    return fiches




def save_fiches_to_json(fiches: list[dict], output_dir: str) -> None:
    """
    Sauvegarde une liste de fiches au format JSON dans un r√©pertoire donn√©.

    Cr√©e un fichier `.json` pour chaque fiche, nomm√© √† partir de son titre,
    dans le dossier de destination sp√©cifi√©.

    Args:
        fiches (List[Dict[str, str]]) : Liste de dictionnaires repr√©sentant les fiches.
        JSON_HEALTH_DOC_BASE (str) : R√©pertoire o√π sauvegarder les fichiers JSON.
    """
    print('appel fonction save_fiches_to_json...')

    output_dir = Path(output_dir)

    print(f"üü† V√©rification type 'output_dir': {type(output_dir)}")
    output_dir.mkdir(parents=True, exist_ok=True)


    written: list[str] = []
    for fiche in fiches:
        # fiche_id s√ªr et z√©ro-padd√©
        fid = str(fiche.get("fiche_id", "000")).zfill(3)
        output_path = output_dir / f"fiche_{fid}.json"
        print(f"üü† V√©rification type 'output_dir': {type(output_path)}")

        # On √©crit dans un .tmp puis on remplace
        tmp_path = output_path.with_suffix(".json.tmp")
        with open(tmp_path, "w", encoding="utf-8") as f:
            json.dump(fiche, f, indent=2, ensure_ascii=False)
        os.replace(tmp_path, output_path)

        written.append(str(output_path))

    print(f"üü¢ {len(written)} fiches sauvegard√©es dans {output_dir}")
    return



PathLike = Union[str, Path]
def convert_and_save_fiches(input_dir: PathLike, output_dir: PathLike) -> None:
    """
    Convertit toutes les fiches DOCX d‚Äôun r√©pertoire et les enregistre au format JSON.

    Encha√Æne les √©tapes de traitement :
        1. Lecture et conversion des fichiers `.docx` en dictionnaires.
        2. Sauvegarde des r√©sultats dans des fichiers `.json` individuels.

    Args:
        INPUT_DOCX (str) : R√©pertoire contenant les fichiers DOCX source.
        JSON_HEALTH_DOC_BASE (str) : R√©pertoire de destination des fichiers JSON g√©n√©r√©s.
    """

    input_dir = Path(input_dir)

    output_dir = Path(output_dir)
    output_dir.mkdir(parents=True, exist_ok=True)

    fiches = convert_fiches_docx_to_json(str(input_dir))
    if not fiches:
        print("üî¥ Aucune fiche extraite (conversion vide ou erreur).")

    save_fiches_to_json(fiches, str(output_dir))




if __name__ == "__main__":
    fiches = convert_fiches_docx_to_json(INPUT_DOCX)
    save_fiches_to_json(fiches, JSON_HEALTH_DOC_BASE)
    print(f"‚úî {len(fiches)} fiches extraites et enregistr√©es dans '{JSON_HEALTH_DOC_BASE}'.")
