"""
Module de conversion des donn√©es JSON d'un POA en texte structur√© pour LLM.

Ce module extrait les informations pertinentes du dictionnaire JSON d‚Äôun plan
d‚Äôobjectifs et d‚Äôactions (POA), notamment les donn√©es de la personne accompagn√©e,
ses contacts et les diff√©rentes sections th√©matiques (social, sant√©, autonomie).
Il g√©n√®re un texte lisible destin√© √† √™tre inject√© dans un prompt pour un mod√®le LLM.

Utilis√© pour formater proprement les donn√©es en amont d‚Äôune g√©n√©ration automatique
de synth√®se ou de recommandations.
"""



from typing import Dict, Any, List

def convert_json_to_text(data: Dict[str, Any]) -> str:
    """
        Convertit un dictionnaire JSON repr√©sentant les donn√©es du POA en texte structur√© pour le LLM.

        Cette fonction extrait les informations cl√©s de la section "usager" du JSON (nom, pr√©nom, sexe,
        date de naissance, situation familiale, adresse, contacts) et les formate sous forme de lignes de texte.
        Elle remplace les valeurs manquantes ou nulles par "Non renseign√©" pour √©viter des trous dans l'affichage.

        Args:
            data (Dict[str, Any]): Donn√©es du POA sous forme de dictionnaire JSON.

        Returns:
            str: Texte structur√© pr√™t √† √™tre envoy√© au LLM, avec les informations de pr√©sentation de la personne.

        Exemple de sortie :
            ### Pr√©sentation de la personne accompagn√©e
            - Nom : Dupont
            - Pr√©nom : Jeanne
            - Sexe : F√©minin
            - Date de naissance : 1945-09-15
            - Situation familiale : Veuve
            - Adresse : 10 avenue des Lilas, 02100 Saint Quentin
            - Tel. domicile : 0170872230
            - Tel. mobile : Non renseign√©
            - Courriel : contact@example.org
        """

    lines = []

    # --- Pr√©sentation de la personne ---
    usager = data.get("usager", {})
    infos = usager.get("Informations d'√©tat civil", {}).get("personnePhysique", {})
    adresse = usager.get("adresse", {})
    contact = usager.get("contactInfosPersonnels", {})
    print("üîç Contact dans convert_json_to_text INITIALISATION :", contact)

    lines.append("### Pr√©sentation de la personne accompagn√©e")
    nom_famille = infos.get('nomFamille')
    lines.append(f"- Nom : {nom_famille if nom_famille else 'Non renseign√©'}")

    prenom = infos.get('prenomUtilise')
    lines.append(f"- Pr√©nom : {prenom if prenom else 'Non renseign√©'}")

    sexe = infos.get('sexe')
    lines.append(f"- Sexe : {sexe if sexe else 'Non renseign√©'}")

    date_naissance = infos.get('dateNaissance')
    lines.append(f"- Date de naissance : {date_naissance if date_naissance else 'Non renseign√©'}")

    situation_famille = infos.get('situationFamiliale')
    lines.append(f"- Situation familiale : {situation_famille if situation_famille else 'Non renseign√©'}")

    adresse_ligne = " ".join(filter(None, adresse.get("ligne", []))) or "Non renseign√©"
    code_postal = adresse.get("codePostal", "Non renseign√©")
    commune = adresse.get("libelleCommune", "Non renseign√©")
    lines.append(f"- Adresse : {adresse_ligne}, {code_postal} {commune}")

    tel_domicile = contact.get('domicile')
    lines.append(f"- Tel. domicile : {tel_domicile if tel_domicile else 'Non renseign√©'}")

    tel_mobile = contact.get('mobile')
    lines.append(f"- Tel. mobile : {tel_mobile if tel_mobile else 'Non renseign√©'}")

    mail = contact.get('mail')
    lines.append(f"- Courriel : {mail if mail else 'Non renseign√©'}")

    # --- Contacts ---
    contacts = usager.get("contacts", [])
    lines.append("\n### Contacts identifi√©s")
    for i, c in enumerate(contacts):
        nom = f"{c.get('prenom', '')} {c.get('nom', '')}".strip()
        roles = f"{c.get('lienParente', '')}, {c.get('role', '')}".strip(', ')
        lines.append(f"- Contact {i+1} : {nom} ({roles})")
        lines.append(f"  - T√©l√©phone : {c.get('telephone', 'Non renseign√©')}")
        lines.append(f"  - Email : {c.get('email', 'Non renseign√©')}")

    # --- Blocs POA ---
    for section_name in ["poaSocial", "poaSante", "poaAutonomie"]:
        section = data.get(section_name, {})
        problemes = section.get("problemes", [])
        if problemes:
            lines.append(f"\n## Section {section_name}")
        for bloc in problemes:
            lines.append("\n---")
            lines.append(f"### üßπ Bloc POA : {bloc.get('nomBloc', 'Inconnu')} (Statut : {bloc.get('statut', 'Inconnu')})")

            lines.append("#### Probl√®me pos√©")
            lines.append(bloc.get("problemePose", "Non renseign√©"))

            lines.append("\n#### Objectifs vis√©s")
            lines.append(bloc.get("objectifs", "Non renseign√©"))

            lines.append("\n#### Actions propos√©es")
            for action in bloc.get("planActions", []):
                lines.append(f"- **Action :** {action.get('nomAction', 'Non renseign√©')}  ")
                lines.append(f"  **Responsable :** {action.get('personneChargeAction', 'Non renseign√©')}  ")
                # Tu peux enrichir ici avec date, r√©currence, etc. si besoin

    print(f"üîç Contact dans convert_json_to_text : {contact}")

    return "\n".join(lines)
