"""
Module d'export des r√©ponses g√©n√©r√©es par le mod√®le LLM pour un patient donn√©.

Ce module permet de r√©cup√©rer toutes les r√©ponses associ√©es √† une session,
de les concat√©ner proprement, et de les exporter dans un fichier Markdown.
Il peut √©galement int√©grer des graphiques de constantes si fournis.

Utilis√© notamment pour g√©n√©rer des synth√®ses textuelles enrichies √† partir
des sessions de chat dans l'application OBY-IA.
"""

# src/utils/export_chat_response.py

from pathlib import Path
from datetime import datetime
from fpdf import FPDF
from docx import Document
import os
from config.config import MARKDOWN_CHAT_EXPORTS


def export_llm_responses(session_manager_instance, session_id, patient_name, figs_list=None):
    """
    Exporte l'historique complet des √©changes (utilisateur + LLM) d'une session
    vers un fichier Markdown, avec option d'inclure des graphiques.

    Chaque interaction est format√©e sous forme :
    - **Utilisateur** : question
    - **OBY-Chat** : r√©ponse

    Args:
        session_manager_instance: Instance du gestionnaire de sessions.
        session_id (str): Identifiant unique de la session.
        patient_name (str): Nom du patient pour nommer le fichier export√©.
        figs_list (list, optional): Liste de chemins vers des fichiers image √† inclure.

    Raises:
        ValueError: Si aucun historique n'est disponible √† exporter.
    """

    session = session_manager_instance.get_session(session_id)
    if not session:
        raise ValueError("‚ùå Session introuvable pour l‚Äôexport.")


    chat_history = session_manager_instance.get_chat_history(session_id)
    if not chat_history:
        raise ValueError("‚ùå Aucun √©change enregistr√© dans cette session.")

    print(f"üß† Nombre d‚Äô√©changes r√©cup√©r√©s : {len(chat_history)}")

    icon_user = "üßë‚Äç‚öïÔ∏è"
    icon_llm = "ü§ñ"
    formatted_exchanges = []

    final_text = ""
    for user_msg, llm_msg in chat_history:
        formatted = (
            f"{icon_user} **Utilisateur :**\n"
            f"<span style='color:#2ecc71'>{user_msg.strip()}</span>\n\n"
            f"{icon_llm} **R√©ponse OBY :**\n"
            f"{llm_msg.strip()}"
        )
        formatted_exchanges.append(formatted)

    final_text = "\n\n---\n\n".join(formatted_exchanges)

    # for user_input, model_response in chat_history:
    #     final_text += f"**Utilisateur** : {user_input}\n\n"
    #     final_text += f"**OBY-Chat** : {model_response}\n\n"
    #     final_text += "---\n\n"

    # Chemin d'export
    today = datetime.today().strftime("%Y-%m-%d")
    export_dir = MARKDOWN_CHAT_EXPORTS / patient_name / today
    export_dir.mkdir(parents=True, exist_ok=True)


    # Fichier final
    file_path = export_dir / f"export_chat_{patient_name}.md"


    # √âcriture Markdown
    with open(file_path, "w", encoding="utf-8") as f:
        f.write(final_text)

        # Si des figures sont fournies
        if figs_list:
            print(f'type(figs_list[0] --> "{type(figs_list[0])}")')
            f.write("\n\n## Graphique des constantes du patient\n\n")

            for i, fig in enumerate(figs_list):
                image_path = os.path.join(export_dir, f"{patient_name}_graph_{i + 1}.png")
                fig.write_image(image_path)
                f.write(f"![Graphique {i + 1}]({os.path.basename(image_path)})\n\n")


    print(f"‚úÖ Export Markdown termin√© : {file_path}")
    return str(file_path)

