"""
Module d'indexation des documents de sant√© dans une base vectorielle ChromaDB.

Ce module prend en entr√©e des fichiers JSON repr√©sentant soit des documents issus de fichiers DOCX,
soit des pages web structur√©es, puis les segmente et les ins√®re dans une collection ChromaDB.
"""



from uuid import uuid4
from datetime import datetime
import os, json
from chromadb import Client
from chromadb.config import Settings
from chromadb.utils import embedding_functions
from src.utils.chroma_client import get_chroma_client

def index_documents(source_dir: str, source_type: str, client: Client):
    """
    Indexe les documents JSON contenus dans un r√©pertoire dans une collection ChromaDB.

    Chaque document est d√©coup√© en sections (ou chunk unique dans le cas d'un fichier DOCX complet),
    puis ins√©r√© dans une base vectorielle avec ses m√©tadonn√©es.

    Args:
        source_dir (str): Chemin du dossier contenant les fichiers JSON √† indexer.
        source_type (str): Type de document √† indexer, soit 'docx' soit 'web'.
        client (Client): Instance du client ChromaDB utilis√©e pour la persistance des donn√©es.

    Entr√©es :
        - source_dir (str) : Dossier contenant les fichiers JSON.
        - source_type (str) : 'docx' ou 'web' (d√©termine la collection cible).

    Sorties :
        - Indexation des chunks dans une collection nomm√©e selon la source.


    Raises:
        ValueError: Si le type de source est invalide (autre que 'docx' ou 'web').
    """

    print("lancement fonction -> index_documents()... ")

    if source_type not in ("docx", "web"):
        raise ValueError("source_type doit √™tre 'docx' ou 'web'.")

    collection_name = "base_docx" if source_type == "docx" else "base_web"

    # üîπ Initialisation collection
    # client = get_chroma_client()
    embedding_fn = embedding_functions.SentenceTransformerEmbeddingFunction(
        model_name="all-MiniLM-L6-v2"
    )
    collection = client.get_or_create_collection(name=collection_name, embedding_function=embedding_fn)

    print(f"üîç Indexation des documents depuis : {source_dir} (type: {source_type})")

    total_files, indexed_chunks = 0, 0

    for file in os.listdir(source_dir):
        if not file.endswith(".json"):
            continue
        print(f"üìÑ Traitement du fichier JSON : {file}")

        file_path = os.path.join(source_dir, file)
        try:
            with open(file_path, "r", encoding="utf-8") as f:
                data = json.load(f)
        except Exception as e:
            print(f"‚ùå Erreur de lecture {file}: {e}")
            continue

        fiches = data if isinstance(data, list) else [data]

        for fiche in fiches:
            print(
                f"‚û°Ô∏è Titre fiche : {fiche.get('titre', 'Sans titre')} - Source : {fiche.get('source_url', 'inconnue')}")
            titre = fiche.get("titre", "Titre inconnu")
            type_document = fiche.get("type_document", "document")
            source = fiche.get("source_doc" if source_type == "docx" else "source_url", "Source inconnue")

            if source_type == "docx":
                # ‚úÖ 1 seul chunk : texte complet
                chunk_text = fiche.get("texte_complet", "").strip()
                if not chunk_text:
                    print(f"‚ö†Ô∏è Texte vide pour le fichier {file}")
                    continue

                chunk_id = f"{file}_{uuid4().hex[:8]}"
                try:
                    collection.add(
                        documents=[chunk_text],
                        ids=[chunk_id],
                        metadatas=[{
                            "titre": titre,
                            "type_document": type_document,
                            "source": source,
                            "section_index": 0,
                            "source_type": source_type,
                            "date_indexation": datetime.now().strftime("%Y-%m-%d"),
                        }]
                    )
                    indexed_chunks += 1
                except Exception as e:
                    print(f"‚ùå Erreur d‚Äôajout depuis {file} : {e}")


            elif source_type == "web":
                sections = fiche.get("sections", [])
                if not sections:
                    print(f"‚ö†Ô∏è Aucune section trouv√©e dans le fichier {file}")
                    continue

                for i, section in enumerate(sections):
                    chunk_text = section.get("texte", "").strip()
                    if not chunk_text:
                        print(f"‚ö†Ô∏è Chunk vide dans section {i} du fichier {file}")
                        continue

                    chunk_id = f"{file}_{uuid4().hex[:8]}"
                    try:
                        collection.add(
                            documents=[chunk_text],
                            ids=[chunk_id],
                            metadatas=[{
                                "titre": titre,
                                "type_document": type_document,
                                "source": source,
                                "section_index": i,
                                "source_type": source_type,
                                "date_indexation": datetime.now().strftime("%Y-%m-%d"),
                            }]
                        )
                        indexed_chunks += 1
                    except Exception as e:
                        print(f"‚ùå Erreur d'ajout d'une section depuis {file}, section {i} : {e}")


        total_files += 1

    print(f"‚úÖ {indexed_chunks} sections index√©es √† partir de {total_files} fichiers.")

