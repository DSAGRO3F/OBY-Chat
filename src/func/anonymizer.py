"""
Module d'anonymisation et de dÃ©sanonymisation des donnÃ©es patient.

Ce module permet :
- d'anonymiser des champs sensibles dans une structure JSON (ex. : prÃ©noms, adresses, contacts),
- de gÃ©nÃ©rer un dictionnaire de correspondance entre valeurs originales et anonymisÃ©es,
- de dÃ©sanonymiser un texte produit Ã  partir des donnÃ©es en rÃ©injectant les valeurs originales.

Lâ€™anonymisation repose Ã  la fois sur des rÃ¨gles dynamiques (ex. : prÃ©nom selon le sexe)
et sur des valeurs codÃ©es en dur (HARDCODED_VALUES).
"""




import re
from typing import Any, Dict, Tuple
from src.func.detect_genre import generate_prenom_from_sexe
from src.func.detect_genre import HARDCODED_VALUES



def _anonymize_dict(data: Any, mapping: Dict[str, str], path: str = "", parent_sexe: str = None) -> Any:
    """
    Fonction rÃ©cursive interne pour anonymiser une structure JSON.

    Args:
        data (Any): DonnÃ©es JSON Ã  traiter (dictionnaire, liste, ou valeur).
        mapping (Dict[str, str]): Dictionnaire des correspondances anonymisÃ©es.
        path (str, optional): Chemin courant dans la structure (pour les rÃ¨gles HARDCODED).
        parent_sexe (str, optional): Sexe hÃ©ritÃ© pour gÃ©nÃ©rer les prÃ©noms si nÃ©cessaire.

    Returns:
        Any: DonnÃ©es anonymisÃ©es.
    """

    if isinstance(data, dict):
        result = {}
        # DÃ©tecter le sexe Ã  ce niveau ou hÃ©riter
        sexe = data.get("sexe", parent_sexe)

        for key, value in data.items():
            new_path = f"{path}.{key}" if path else key

            # Anonymisation dynamique des prÃ©noms selon le sexe
            if key in {"prenomsActeNaissance", "premierPrenomActeNaissance", "prenomUtilise"} and sexe:
                prenoms_dyn = generate_prenom_from_sexe(sexe)
                fake_prenom = prenoms_dyn.get(key, "Non renseignÃ©")
                mapping[fake_prenom] = value if value is not None else "Non renseignÃ©"
                result[key] = fake_prenom
            else:
                result[key] = _anonymize_dict(value, mapping, new_path, sexe)

        return result

    elif isinstance(data, list):
        return [
            _anonymize_dict(item, mapping, f"{path}[{i}]", parent_sexe)
            for i, item in enumerate(data)
        ]

    elif isinstance(data, str):
        # Exemple d'exclusion (date naissance usager) si tu veux le garder non anonymisÃ©
        normalized_path = path.lower()
        if normalized_path == "usager.informations d'Ã©tat civil.personnephysique.datenaissance":
            return data

        # HARDCODED_VALUES : anonymisation statique
        if path in HARDCODED_VALUES:
            anonymized = HARDCODED_VALUES[path]
            mapping[anonymized] = data
            return anonymized

        return data

    elif data is None:
        # Si HARDCODED_VALUES a une valeur mÃªme pour ce chemin
        if path in HARDCODED_VALUES:
            anonymized = HARDCODED_VALUES[path]
            mapping[anonymized] = "Non renseignÃ©"
            return anonymized
        return data

    return data



def anonymize_fields(data: Any) -> Tuple[Any, Dict[str, str]]:
    """
    Anonymise une structure JSON complÃ¨te.

    Cette fonction applique les rÃ¨gles dâ€™anonymisation dynamiques et statiques,
    et retourne les donnÃ©es anonymisÃ©es avec leur dictionnaire de correspondance.

    Args:
        data (Any): DonnÃ©es JSON Ã  anonymiser.

    Returns:
        Tuple[Any, Dict[str, str]]: DonnÃ©es anonymisÃ©es et mapping {valeur_anonymisÃ©e: valeur_originale}.
    """

    mapping = {}
    anonymized_data = _anonymize_dict(data, mapping)
    return anonymized_data, mapping


def deanonymize_fields(text: str, mapping: Dict[str, str]) -> Tuple[str, Dict[str, str]]:
    """
    Remplace dans un texte les valeurs anonymisÃ©es par leurs Ã©quivalents originaux.

    Args:
        text (str): Texte contenant des valeurs anonymisÃ©es.
        mapping (Dict[str, str]): Dictionnaire des correspondances anonymisÃ©es â†’ originales.

    Returns:
        Tuple[str, Dict[str, str]]: Texte dÃ©sanonymisÃ© et dictionnaire utilisÃ©.
    """

    print("ğŸŸ£ DÃ©but dÃ©sanonymisation")
    for anonymized, original in mapping.items():
        if original in ["None", None]:
            original = ""

        # Forcer str pour Ã©viter des erreurs
        original = str(original)

        print(f"ğŸ”„ Remplacement : {anonymized} --> {original}")

        pattern = re.compile(re.escape(anonymized), flags=re.IGNORECASE)
        new_text, n_replacements = pattern.subn(original, text)

        if n_replacements > 0:
            print(f"âœ… {n_replacements} remplacement(s) effectuÃ©(s) pour : {anonymized}")

        text = new_text

    print("ğŸŸ£ DÃ©sanonymisation terminÃ©e")
    return text, mapping


